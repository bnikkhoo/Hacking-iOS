/* The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors? */

var counter = 2000000, number = 0, numberDivisors = 0

func countDivisors(_ number: Int) -> Int {
    var divisors = 0
    var i = 1
    while i*i < number {
        if number % i == 0 {
            if (i*i < number) {
                divisors += 2
            } else {
                divisors += 1
            }
        }
        i += 1
    }
    return divisors
}

while true {
    number = counter*(counter+1)/2
    
    if countDivisors(number) > 500 {
        print(countDivisors(number))
        print(number)
        break
    }
    
    counter += 1
    print(counter, number, countDivisors(number))
}

/*
func sieve(){
    
    let limit = 2000000
    var sum = 2
    var marks = [Bool](repeating: false, count: limit)
    
    for i in stride(from: 3, to: limit, by: 2) {
        if !marks[i] {
            sum += i
            for j in stride(from: i, to: limit, by: i*2) { marks[j] = true }
        }
    }
    print(sum)
}



 var n = 1, maxDivisors = 1
while countDivisors(number: (n+1)/2) * countDivisors(number: n) <= maxDivisors {
    n += 1
    if countDivisors(number: n/2) * countDivisors(number: n+1) > maxDivisors { break }
    n += 1
}

let theNumber = n*(n+1)/2

 print(theNumber)
*/
